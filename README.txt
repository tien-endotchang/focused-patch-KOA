- train.ipynb: run training for our model (jupyter notebook) 
  - save best weight if run
  - save test prediction and test attention score (for each patch) for inference purpose
  - ./model_checkpoints: trained best weight in our experiment
- inference.ipynb: run inference (prediction, saliency maps)
- shape_patch_kl.ipynb: 
  - compute and save the data for training (./data/knee_patches_patient_grouped_16_100.h5) in .h5 file. Need DICOM directory, .pts landmark files from landmark detector, e.g., BoneFinder, KL grades (e.g., kxr_sq_bu00.txt from OAI)
  - id_shapeLR_V00.npz: patient ids, shapes for left and right knee and KL grades for each knee

inference (folder)
  - ./bootstrap: boostrapped test patient ids for estimating std of metrics
  - ./Bilateral_PA_Fixed_Flexion_Knee: example DICOM file used in our paper
  - cm.eps / cm.png: confusion matrix of our method on test data generated by inference.ipynb
  - id_shapeLR_V00.npz (generated by shape_patch_kl.ipynb)
  - test_att_scores.npz (generated by train.ipynb)
  - test_pred.npz (generated by train.ipynb)
demo (folder):
  - generated saliency maps and examples
DeepPatch_env.yml: .yml file for environment